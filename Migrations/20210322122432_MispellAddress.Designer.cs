// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Vizitz.Data;

namespace Vizitz.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20210322122432_MispellAddress")]
    partial class MispellAddress
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Vizitz.Entities.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FinishedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VenueId");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("Vizitz.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Identification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "074 Gunnar Isle, North Zanehaven, Serbia",
                            Email = "Kailee.Torp@gmail.com",
                            Name = "Evangeline Rath",
                            Phone = "(377) 524-7844"
                        },
                        new
                        {
                            Id = 2,
                            Address = "1004 Beier Crest, New Adrien, Uzbekistan",
                            Email = "Rory.Corkery@gmail.com",
                            Name = "Stuart Rath",
                            Phone = "1-396-914-3389 x557"
                        },
                        new
                        {
                            Id = 3,
                            Address = "2778 Columbus Center, Altenwerthfort, Macao",
                            Email = "Brent_Howell74@gmail.com",
                            Name = "Drew Hagenes",
                            Phone = "297.694.3867 x56472"
                        },
                        new
                        {
                            Id = 4,
                            Address = "5996 Roberts Plain, Ryanburgh, Dominica",
                            Email = "Jett_Lubowitz8@hotmail.com",
                            Name = "Precious Walker",
                            Phone = "689.497.2648"
                        },
                        new
                        {
                            Id = 5,
                            Address = "672 Beau Courts, Rahulhaven, Niue",
                            Email = "Alexa_Bins@gmail.com",
                            Name = "Santos Farrell",
                            Phone = "605-908-7707 x0298"
                        },
                        new
                        {
                            Id = 6,
                            Address = "1169 Lakin Flat, Lake Omari, El Salvador",
                            Email = "Brad.Thompson@hotmail.com",
                            Name = "Bessie Lowe",
                            Phone = "635.511.4191"
                        },
                        new
                        {
                            Id = 7,
                            Address = "1087 Janis Land, Beatriceland, Finland",
                            Email = "Korbin.Schiller@hotmail.com",
                            Name = "Luigi Kirlin",
                            Phone = "545-757-7491"
                        },
                        new
                        {
                            Id = 8,
                            Address = "1903 McDermott Fords, Lake Ike, Morocco",
                            Email = "Koby_Williamson@hotmail.com",
                            Name = "Domenico Labadie",
                            Phone = "1-994-734-0686"
                        },
                        new
                        {
                            Id = 9,
                            Address = "3615 Linwood Spring, South Cole, Jordan",
                            Email = "Ivah_Haag21@hotmail.com",
                            Name = "Ericka Jerde",
                            Phone = "979-488-1784"
                        },
                        new
                        {
                            Id = 10,
                            Address = "723 Vincenzo Orchard, West Rick, Virgin Islands, British",
                            Email = "Elza_Aufderhar33@hotmail.com",
                            Name = "Halle Gaylord",
                            Phone = "568.521.5942 x066"
                        });
                });

            modelBuilder.Entity("Vizitz.Entities.Venue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProprietorId")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProprietorId");

                    b.ToTable("Venue");
                });

            modelBuilder.Entity("Vizitz.Entities.Visit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FinishedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VisitorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("VisitorId");

                    b.ToTable("Visit");
                });

            modelBuilder.Entity("Vizitz.Entities.Schedule", b =>
                {
                    b.HasOne("Vizitz.Entities.Venue", "Venue")
                        .WithMany("Schedules")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Vizitz.Entities.Venue", b =>
                {
                    b.HasOne("Vizitz.Entities.User", "Proprietor")
                        .WithMany("Venues")
                        .HasForeignKey("ProprietorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Proprietor");
                });

            modelBuilder.Entity("Vizitz.Entities.Visit", b =>
                {
                    b.HasOne("Vizitz.Entities.Schedule", "Schedule")
                        .WithMany("Visits")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Vizitz.Entities.User", "Visitor")
                        .WithMany("Visits")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Schedule");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("Vizitz.Entities.Schedule", b =>
                {
                    b.Navigation("Visits");
                });

            modelBuilder.Entity("Vizitz.Entities.User", b =>
                {
                    b.Navigation("Venues");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("Vizitz.Entities.Venue", b =>
                {
                    b.Navigation("Schedules");
                });
#pragma warning restore 612, 618
        }
    }
}
